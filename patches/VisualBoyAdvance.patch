 src/GBA.cpp     | 17 ++++++++++++++---
 src/Util.cpp    |  4 ++++
 src/gb/GB.cpp   |  6 ++++++
 src/sdl/SDL.cpp | 34 +++++++++++++++++++++++++++++-----
 4 files changed, 53 insertions(+), 8 deletions(-)

diff --git a/src/GBA.cpp b/src/GBA.cpp
index 967688f..abc3b86 100644
--- a/src/GBA.cpp
+++ b/src/GBA.cpp
@@ -846,9 +846,9 @@ static bool CPUWriteState(gzFile gzFile)
   eepromSaveGame(gzFile);
   flashSaveGame(gzFile);
   soundSaveGame(gzFile);
-
+#if GBA_USE_CHEATS
   cheatsSaveGame(gzFile);
-
+#endif
   // version 1.5
   rtcSaveGame(gzFile);
   
@@ -968,9 +968,11 @@ static bool CPUReadState(gzFile gzFile)
   flashReadGame(gzFile, version);
   soundReadGame(gzFile, version);
   
+#if GBA_USE_CHEATS
   if(version > SAVE_GAME_VERSION_1) {
     cheatsReadGame(gzFile, version);
   }
+#endif
   if(version > SAVE_GAME_VERSION_6) {
     rtcReadGame(gzFile);
   }
@@ -1352,10 +1354,12 @@ bool CPUReadBatteryFile(const char *fileName)
   return true;
 }
 
+#ifdef VBA_USE_PNG
 bool CPUWritePNGFile(const char *fileName)
 {
   return utilWritePNGFile(fileName, 240, 160, pix);
 }
+#endif
 
 bool CPUWriteBMPFile(const char *fileName)
 {
@@ -3865,7 +3869,7 @@ void CPULoop(int ticks)
 #endif /* FINAL_VERSION */
 
     if(!holdState && !SWITicks) {
-
+#if GBA_USE_CHEATS
       // Emulates the Cheat System (m) code
       if((cheatsEnabled) && (mastercode) && (mastercode == armNextPC))
       {
@@ -3875,6 +3879,7 @@ void CPULoop(int ticks)
         u32 ext = (joy >> 10);
         cpuTotalTicks += cheatsCheckKeys(P1^0x3FF, ext);
       }
+#endif
 
       if ((armNextPC & 0x0803FFFF) == 0x08020000)
         busPrefetchCount=0x100;
@@ -4001,9 +4006,11 @@ void CPULoop(int ticks)
               }
               
               u32 ext = (joy >> 10);
+#if GBA_USE_CHEATS
               // If no (m) code is enabled, apply the cheats at each LCDline
               if((cheatsEnabled) && (mastercode==0))
                 remainingTicks += cheatsCheckKeys(P1^0x3FF, ext);
+#endif
               speedup = (ext & 1) ? true : false;
               capture = (ext & 2) ? true : false;
               
@@ -4386,8 +4393,12 @@ struct EmulatedSystem GBASystem = {
   CPUReadMemState,
   // emuWriteMemState
   CPUWriteMemState,
+#ifdef VBA_USE_PNG
   // emuWritePNG
   CPUWritePNGFile,
+#else
+  NULL,
+#endif
   // emuWriteBMP
   CPUWriteBMPFile,
   // emuUpdateCPSR
diff --git a/src/Util.cpp b/src/Util.cpp
index 9e3b7d9..52a7d11 100644
--- a/src/Util.cpp
+++ b/src/Util.cpp
@@ -21,9 +21,11 @@
 #include <string.h>
 #include <zlib.h>
 
+#ifdef VBA_USE_PNG
 extern "C" {
 #include <png.h>
 }
+#endif
 
 #if 0
 #include "unrarlib.h"
@@ -59,6 +61,7 @@ static int (ZEXPORT *utilGzWriteFunc)(gzFile, const voidp, unsigned int) = NULL;
 static int (ZEXPORT *utilGzReadFunc)(gzFile, voidp, unsigned int) = NULL;
 static int (ZEXPORT *utilGzCloseFunc)(gzFile) = NULL;
 
+#ifdef VBA_USE_PNG
 bool utilWritePNGFile(const char *fileName, int w, int h, u8 *pix)
 {
   u8 writeBuffer[512 * 3];
@@ -186,6 +189,7 @@ bool utilWritePNGFile(const char *fileName, int w, int h, u8 *pix)
 
   return true;  
 }
+#endif
 
 void utilPutDword(u8 *p, u32 value)
 {
diff --git a/src/gb/GB.cpp b/src/gb/GB.cpp
index 4536c2d..442f591 100644
--- a/src/gb/GB.cpp
+++ b/src/gb/GB.cpp
@@ -3963,12 +3963,14 @@ bool gbReadSaveState(const char *name)
   return res;
 }
 
+#ifdef VBA_USE_PNG
 bool gbWritePNGFile(const char *fileName)
 {
   if(gbBorderOn)
     return utilWritePNGFile(fileName, 256, 224, pix);
   return utilWritePNGFile(fileName, 160, 144, pix);
 }
+#endif
 
 bool gbWriteBMPFile(const char *fileName)
 {
@@ -5425,8 +5427,12 @@ struct EmulatedSystem GBSystem = {
   gbReadMemSaveState,
   // emuWriteMemState
   gbWriteMemSaveState,
+#ifdef VBA_USE_PNG
   // emuWritePNG
   gbWritePNGFile,
+#else
+  NULL,
+#endif
   // emuWriteBMP
   gbWriteBMPFile,
   // emuUpdateCPSR
diff --git a/src/sdl/SDL.cpp b/src/sdl/SDL.cpp
index 05d4114..8eb12fc 100644
--- a/src/sdl/SDL.cpp
+++ b/src/sdl/SDL.cpp
@@ -39,6 +39,8 @@
 #include "../gb/GB.h"
 #include "../gb/gbGlobals.h"
 
+#undef _WIN32
+
 #ifndef _WIN32
 # include <unistd.h>
 # define GETCWD getcwd
@@ -237,10 +239,17 @@ int sdlMirroringEnable = 0;
 
 int sdlDefaultJoypad = 0;
 
-extern void debuggerSignal(int,int);
+void debuggerOutput(char *s, u32 addr)
+{
+  if(s)
+    printf(s);
+}
 
+#ifdef SDL_DEBUGGER
+extern void debuggerSignal(int,int);
 void (*dbgMain)() = debuggerMain;
 void (*dbgSignal)(int,int) = debuggerSignal;
+#endif
 void (*dbgOutput)(char *, u32) = debuggerOutput;
 
 int  mouseCounter = 0;
@@ -1765,6 +1774,7 @@ void sdlPollEvents()
         }
         break;
       case SDLK_F11:
+#ifdef SDL_DEBUGGER
         if(dbgMain != debuggerMain) {
           if(armState) {
             armNextPC -= 4;
@@ -1776,6 +1786,7 @@ void sdlPollEvents()
         }
         debugger = true;
         break;
+#endif
       case SDLK_F1:
       case SDLK_F2:
       case SDLK_F3:
@@ -1945,7 +1956,11 @@ Long options only:\n\
 ");
 }
 
-int main(int argc, char **argv)
+extern "C" {
+    int vba_main(int argc, char **argv);
+}
+
+int vba_main(int argc, char **argv)
 {
   fprintf(stderr, "VisualBoyAdvance version %s [SDL]\n", VERSION);
 
@@ -2038,6 +2053,7 @@ int main(int argc, char **argv)
       } else
         yuvType = SDL_YV12_OVERLAY;
       break;
+#ifdef SDL_DEBUGGER
     case 'G':
       dbgMain = remoteStubMain;
       dbgSignal = remoteStubSignal;
@@ -2073,6 +2089,7 @@ int main(int argc, char **argv)
         systemDebug = 1;
       }
       break;
+#endif
     case 'F':
       fullscreen = 1;
       mouseCounter = 120;
@@ -2303,9 +2320,10 @@ int main(int argc, char **argv)
   }
   
   sdlReadBattery();
-  
+#ifdef SDL_DEBUGGER
   if(debuggerStub) 
     remoteInit();
+#endif
   
   int flags = SDL_INIT_VIDEO|SDL_INIT_AUDIO|
     SDL_INIT_TIMER|SDL_INIT_NOPARACHUTE;
@@ -2567,9 +2585,11 @@ int main(int argc, char **argv)
 
   while(emulating) {
     if(!paused && active) {
-      if(debugger && emulator.emuHasDebugger)
+      if(debugger && emulator.emuHasDebugger) {
+#ifdef SDL_DEBUGGER
         dbgMain();
-      else {
+#endif
+      } else {
         emulator.emuMain(emulator.emuCount);
         if(rewindSaveNeeded && rewindMemory && emulator.emuWriteMemState) {
           rewindCount++;
@@ -2599,7 +2619,9 @@ int main(int argc, char **argv)
   
   emulating = 0;
   fprintf(stderr,"Shutting down\n");
+#ifdef SDL_DEBUGGER
   remoteCleanUp();
+#endif
   soundShutdown();
 
   if(gbRom != NULL || rom != NULL) {
@@ -2912,11 +2934,13 @@ void systemScreenCapture(int a)
 
     emulator.emuWriteBMP(buffer);
   } else {
+#ifdef VBA_USE_PNG
     if(captureDir[0])
       sprintf(buffer, "%s/%s%02d.png", captureDir, sdlGetFilename(filename), a);
     else
       sprintf(buffer, "%s%02d.png", filename, a);
     emulator.emuWritePNG(buffer);
+#endif
   }
 
   systemScreenMessage("Screen capture");
