 freetype/builds/vsf/ftdebug.c               | 239 ++++++++++++++++++++++++++++
 freetype/include/freetype/config/ftstdlib.h |  72 +++++++++
 2 files changed, 311 insertions(+)

diff --git a/freetype/builds/vsf/ftdebug.c b/freetype/builds/vsf/ftdebug.c
new file mode 100644
index 0000000..3f3488a
--- /dev/null
+++ b/freetype/builds/vsf/ftdebug.c
@@ -0,0 +1,239 @@
+/****************************************************************************
+ *
+ * ftdebug.c
+ *
+ *   Debugging and logging component for Win32 (body).
+ *
+ * Copyright (C) 1996-2019 by
+ * David Turner, Robert Wilhelm, and Werner Lemberg.
+ *
+ * This file is part of the FreeType project, and may only be used,
+ * modified, and distributed under the terms of the FreeType project
+ * license, LICENSE.TXT.  By continuing to use, modify, or distribute
+ * this file you indicate that you have read the license and
+ * understand and accept it fully.
+ *
+ */
+
+
+  /**************************************************************************
+   *
+   * This component contains various macros and functions used to ease the
+   * debugging of the FreeType engine.  Its main purpose is in assertion
+   * checking, tracing, and error detection.
+   *
+   * There are now three debugging modes:
+   *
+   * - trace mode
+   *
+   *   Error and trace messages are sent to the log file (which can be the
+   *   standard error output).
+   *
+   * - error mode
+   *
+   *   Only error messages are generated.
+   *
+   * - release mode:
+   *
+   *   No error message is sent or generated.  The code is free from any
+   *   debugging parts.
+   *
+   */
+
+#include <ft2build.h>
+#include FT_FREETYPE_H
+#include FT_INTERNAL_DEBUG_H
+
+#ifdef FT_DEBUG_LEVEL_ERROR
+
+#include <stdarg.h>
+#include <stdlib.h>
+#include <string.h>
+
+#include "vsf.h"
+
+
+  /* documentation is in ftdebug.h */
+
+  FT_BASE_DEF( void )
+  FT_Message( const char*  fmt,
+              ... )
+  {
+    va_list ap;
+    va_start(ap, fmt);
+    vsf_trace_arg(VSF_TRACE_INFO, fmt, &ap);
+    va_end(ap);
+  }
+
+
+  /* documentation is in ftdebug.h */
+
+  FT_BASE_DEF( void )
+  FT_Panic( const char*  fmt,
+            ... )
+  {
+    va_list ap;
+    va_start(ap, fmt);
+    vsf_trace_arg(VSF_TRACE_ERROR, fmt, &ap);
+    va_end(ap);
+
+    exit( EXIT_FAILURE );
+  }
+
+
+  /* documentation is in ftdebug.h */
+
+  FT_BASE_DEF( int )
+  FT_Throw( FT_Error     error,
+            int          line,
+            const char*  file )
+  {
+    vsf_trace(VSF_TRACE_ERROR,
+      "%s:%d: error 0x%02x: %s\n",
+      file, line, error, FT_Error_String( error ) );
+
+    return 0;
+  }
+
+#endif /* FT_DEBUG_LEVEL_ERROR */
+
+
+#ifdef FT_DEBUG_LEVEL_TRACE
+
+  /* array of trace levels, initialized to 0; */
+  /* this gets adjusted at run-time           */
+  static int  ft_trace_levels_enabled[trace_count];
+
+  /* array of trace levels, always initialized to 0 */
+  static int  ft_trace_levels_disabled[trace_count];
+
+  /* a pointer to either `ft_trace_levels_enabled' */
+  /* or `ft_trace_levels_disabled'                 */
+  int*  ft_trace_levels;
+
+  /* define array of trace toggle names */
+#define FT_TRACE_DEF( x )  #x ,
+
+  static const char*  ft_trace_toggles[trace_count + 1] =
+  {
+#include FT_INTERNAL_TRACE_H
+    NULL
+  };
+
+#undef FT_TRACE_DEF
+
+
+  /* documentation is in ftdebug.h */
+
+  FT_BASE_DEF( FT_Int )
+  FT_Trace_Get_Count( void )
+  {
+    return trace_count;
+  }
+
+
+  /* documentation is in ftdebug.h */
+
+  FT_BASE_DEF( const char * )
+  FT_Trace_Get_Name( FT_Int  idx )
+  {
+    int  max = FT_Trace_Get_Count();
+
+
+    if ( idx < max )
+      return ft_trace_toggles[idx];
+    else
+      return NULL;
+  }
+
+
+  /* documentation is in ftdebug.h */
+
+  FT_BASE_DEF( void )
+  FT_Trace_Disable( void )
+  {
+    ft_trace_levels = ft_trace_levels_disabled;
+  }
+
+
+  /* documentation is in ftdebug.h */
+
+  FT_BASE_DEF( void )
+  FT_Trace_Enable( void )
+  {
+    ft_trace_levels = ft_trace_levels_enabled;
+  }
+
+
+  /**************************************************************************
+   *
+   * Initialize the tracing sub-system.  This is done by retrieving the
+   * value of the `FT2_DEBUG' environment variable.  It must be a list of
+   * toggles, separated by spaces, `;', or `,'.  Example:
+   *
+   *   export FT2_DEBUG="any:3 memory:7 stream:5"
+   *
+   * This requests that all levels be set to 3, except the trace level for
+   * the memory and stream components which are set to 7 and 5,
+   * respectively.
+   *
+   * See the file `include/freetype/internal/fttrace.h' for details of
+   * the available toggle names.
+   *
+   * The level must be between 0 and 7; 0 means quiet (except for serious
+   * runtime errors), and 7 means _very_ verbose.
+   */
+  FT_BASE_DEF( void )
+  ft_debug_init( void )
+  {
+    // TODO: parse debug levels
+    ft_trace_levels = ft_trace_levels_enabled;
+  }
+
+
+#else  /* !FT_DEBUG_LEVEL_TRACE */
+
+
+  FT_BASE_DEF( void )
+  ft_debug_init( void )
+  {
+    /* nothing */
+  }
+
+
+  FT_BASE_DEF( FT_Int )
+  FT_Trace_Get_Count( void )
+  {
+    return 0;
+  }
+
+
+  FT_BASE_DEF( const char * )
+  FT_Trace_Get_Name( FT_Int  idx )
+  {
+    FT_UNUSED( idx );
+
+    return NULL;
+  }
+
+
+  FT_BASE_DEF( void )
+  FT_Trace_Disable( void )
+  {
+    /* nothing */
+  }
+
+
+  /* documentation is in ftdebug.h */
+
+  FT_BASE_DEF( void )
+  FT_Trace_Enable( void )
+  {
+    /* nothing */
+  }
+
+
+#endif /* !FT_DEBUG_LEVEL_TRACE */
+
+
+/* END */
diff --git a/freetype/include/freetype/config/ftstdlib.h b/freetype/include/freetype/config/ftstdlib.h
index d6091f8..6aff0a3 100644
--- a/freetype/include/freetype/config/ftstdlib.h
+++ b/freetype/include/freetype/config/ftstdlib.h
@@ -99,8 +99,78 @@
    */
 
 
+#include "vsf.h"
 #include <stdio.h>
 
+#if VSF_USE_FS == ENABLED && VSF_USE_MEMFS == ENABLED
+
+typedef struct FT_FILE {
+    implement(vk_memfs_file_t)
+    uint64_t pos;
+} FT_FILE;
+
+extern FT_FILE ft_root;
+
+static ALWAYS_INLINE int ft_fclose(FT_FILE *f)
+{
+    return 0;
+}
+
+static ALWAYS_INLINE FT_FILE * ft_fopen(const char *filename, const char *mode)
+{
+    return (FT_FILE *)vk_memfs_open(&ft_root.use_as__vk_memfs_file_t, filename);
+}
+
+static ALWAYS_INLINE int ft_fseek(FT_FILE *f, long offset, int fromwhere)
+{
+    uint64_t new_pos;
+
+    switch (fromwhere) {
+    case SEEK_SET:
+        new_pos = 0;
+        break;
+    case SEEK_CUR:
+        new_pos = f->pos;
+        break;
+    case SEEK_END:
+        new_pos = f->size;
+        break;
+    default:
+        VSF_UI_ASSERT(false);
+        return -1;
+    }
+
+    new_pos += offset;
+    if (new_pos > f->size) {
+        return -1;
+    }
+    f->pos = new_pos;
+    return 0;
+}
+
+static ALWAYS_INLINE long ft_ftell(FT_FILE *f)
+{
+    return f->pos;
+}
+
+static ALWAYS_INLINE size_t ft_fread(const void *ptr, size_t size, size_t nmemb, FT_FILE *f)
+{
+    int_fast32_t rlen = vk_memfs_read(&f->use_as__vk_memfs_file_t, f->pos, size * nmemb, (uint8_t *)ptr);
+    if (rlen > 0) { f->pos += rlen; }
+    return rlen;
+}
+
+static ALWAYS_INLINE size_t ft_fwrite(const void *ptr, size_t size, size_t nmemb, FT_FILE *f)
+{
+    int_fast32_t wlen = vk_memfs_write(&f->use_as__vk_memfs_file_t, f->pos, size * nmemb, (uint8_t *)ptr);
+    if (wlen > 0) { f->pos += wlen; }
+    return wlen;
+}
+
+#define ft_sprintf  sprintf
+
+#else
+
 #define FT_FILE     FILE
 #define ft_fclose   fclose
 #define ft_fopen    fopen
@@ -109,6 +179,8 @@
 #define ft_ftell    ftell
 #define ft_sprintf  sprintf
 
+#endif
+
 
   /**************************************************************************
    *
